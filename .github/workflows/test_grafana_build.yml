# name: Build and Deploy Grafana to Docker Swarm

# on:
#   pull_request:
#     branches:
#       - test_deployment # Change to your branch name as needed.

# jobs:
#   check_grafana_service:
#     runs-on: ubuntu-latest
#     outputs:
#       service_running: ${{ steps.set_service_status.outputs.service_running }}
#     steps:
#       - name: Check Grafana Service Status
#         id: check_service
#         uses: appleboy/ssh-action@v0.1.4
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             SERVICE_STATUS=$(docker service ls --filter name=grafana_service --format "{{.Replicas}}")
#             if [[ $SERVICE_STATUS == *"0/0"* ]]; then
#               echo "SERVICE_NOT_RUNNING"
#             else
#               echo "SERVICE_RUNNING"
#             fi

#       - name: Determine Service Status
#         id: set_service_status
#         run: |
#           if echo "${{ steps.check_service.outputs.stdout }}" | grep -q "SERVICE_NOT_RUNNING"; then
#             echo "service_running=false" >> $GITHUB_ENV
#             echo "::set-output name=service_running::false"
#           else
#             echo "service_running=true" >> $GITHUB_ENV
#             echo "::set-output name=service_running::true"
#           fi
#       - name: Debug Output
#         run: |
#           echo "Service running status: ${{ steps.set_service_status.outputs.service_running }}"

#   update_dashboards:
#     runs-on: ubuntu-latest
#     needs: check_grafana_service
#     if: ${{ needs.check_grafana_service.outputs.service_running }}

#     steps:
#       - name: Print Service Running Status
#         run: |
#           echo "Service Running: ${{ needs.check_grafana_service.outputs.service_running }}"

#       # Rest of the steps
#       - name: Checkout repository
#         uses: actions/checkout@v2
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Retrieve and update dashboards
#         run: |
#           # Grafana credentials and URL
#           GRAFANA_URL="http://161.97.173.83:3002" # Replace with your Grafana URL
#           GRAFANA_ADMIN_USERNAME="admin" # Replace with your Grafana admin username if different
#           GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}

#           # Fetch list of all dashboards
#           echo "Fetching list of dashboards..."
#           DASHBOARD_LIST=$(curl -s -k -u "$GRAFANA_ADMIN_USERNAME:$GRAFANA_ADMIN_PASSWORD" \
#                           "$GRAFANA_URL/api/search?type=dash-db")
#           DASHBOARD_UIDS=$(echo $DASHBOARD_LIST | jq -r '.[] | .uid')

#           # Download each dashboard
#           for DASHBOARD_UID in $DASHBOARD_UIDS; do
#             echo "Retrieving dashboard with UID: $DASHBOARD_UID"
#             DASHBOARD_JSON=$(curl -s -k -u "$GRAFANA_ADMIN_USERNAME:$GRAFANA_ADMIN_PASSWORD" \
#                               "$GRAFANA_URL/api/dashboards/uid/$DASHBOARD_UID")
#             DASHBOARD_TITLE=$(echo $DASHBOARD_JSON | jq -r '.dashboard | .title | gsub(" "; "_")')

#             echo "Saving dashboard: $DASHBOARD_TITLE.json"
#             echo $DASHBOARD_JSON | jq '.dashboard' > "Backend/grafana/dashboards/$DASHBOARD_TITLE.json"
#           done

#           # Check for changes
#           if git diff --quiet; then
#             echo "No changes to dashboards. Skipping commit."
#           else
#             echo "Changes detected. Committing and pushing..."
#             git config --global user.name 'github-actions'
#             git config --global user.email 'github-actions@github.com'
#             git add Backend/grafana/dashboards/
#             git commit -m "Update dashboards"
#             git push
#           fi

#       # ... rest of your steps ...

#   build_and_push_grafana:
#     runs-on: ubuntu-latest
#     needs: check_grafana_service

#     steps:
#       - name: Check out the repo
#         uses: actions/checkout@v3
#         with:
#           ref: test_deployment # Specify the branch here if needed
#           fetch-depth: 0 # This ensures the entire repo history is available
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v1
#         with:
#           registry: ghcr.io
#           username: ${{ secrets.GHCR_USERNAME }}
#           password: ${{ secrets.PAT }}

#       - name: Replace PostgreSQL Password in Grafana Configuration
#         run: |
#           sed -i 's/\${POSTGRES_PASSWORD}/'"${{ secrets.POSTGRES_PASSWORD }}"'/g' Backend/grafana/provisioning/datasources/default.yaml
#           cat Backend/grafana/provisioning/datasources/default.yaml # For debugging, remove this line in production

#       - name: Check if Password Placeholder is Replaced
#         run: |
#           if grep -q "\${POSTGRES_PASSWORD}" Backend/grafana/provisioning/datasources/default.yaml; then
#             echo "Password placeholder not replaced."
#             exit 1
#           else
#             echo "Password placeholder replaced successfully."
#           fi

#       - name: Build and push Docker image for Grafana
#         uses: docker/build-push-action@v2
#         with:
#           context: . # Change to the directory containing your Grafana Dockerfile
#           file: ./Backend/grafana/Dockerfile

#           push: true
#           tags: ghcr.io/${{ secrets.GHCR_USERNAME }}/grafana:latest

#   deploy_grafana:
#     runs-on: ubuntu-latest
#     needs: [check_grafana_service, build_and_push_grafana]

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           ref: test_deployment # Specify the branch here if needed
#           fetch-depth: 0 # This ensures the entire repo history is availablee

#       - name: Deploy to Docker Swarm
#         uses: appleboy/ssh-action@v0.1.4
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             # Ensure Docker Swarm is initialized
#             if ! docker info | grep -q 'Swarm: active'; then
#                 echo "Initializing Docker Swarm..."
#                 docker swarm init || { echo "Failed to initialize Docker Swarm"; exit 1; }
#             fi

#             # Convert repository owner to lowercase and store in a variable
#             REPO_OWNER_LOWER=$(echo "${{ secrets.GHCR_USERNAME }}" | tr '[:upper:]' '[:lower:]')
#             IMAGE="ghcr.io/$REPO_OWNER_LOWER/grafana:latest"

#             # Attempt to login to GitHub Container Registry
#             echo "Logging in to GitHub Container Registry..."
#             echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

#             # Check if the image exists in the registry
#             echo "Checking if the image $IMAGE exists in the registry..."
#             if docker pull $IMAGE; then
#                 echo "Image exists. Proceeding with deployment...."

#                 # Check if the shared_network exists, if not, create it
#                 docker network ls | grep sod3_test_network || docker network create --driver=overlay --attachable sod3_test_network

#                 # Remove the old service if it exists
#                 docker service rm grafana_service || true

#                 # Create the service and pass the secret as an environment variable
#                 docker service create \
#                 --name grafana_service \
#                 --network sod3_test_network \
#                 --env GF_SECURITY_ADMIN_PASSWORD="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
#                 --publish published=3000,target=3000 \
#                 $IMAGE

#             else
#                 echo "Image does not exist or cannot be accessed."
#                 echo "Checking permissions and repository settings..."

#                 # Check for read:packages permission
#                 echo "Checking for read:packages permission..."
#                 TOKEN_PERMISSIONS=$(curl -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/user/permissions)
#                 echo "Token permissions: $TOKEN_PERMISSIONS"

#                 # If permissions are insufficient, exit the job with an error
#                 if [[ $TOKEN_PERMISSIONS != *"read:packages"* ]]; then
#                   echo "The PAT does not have read:packages permission."
#                   exit 1
#                 else
#                   echo "The PAT has read:packages permission.."
#                 fi

#                 # Exit with an error
#                 exit 1
#             fi

#             # After updating or creating the service, additional steps can be added to verify the deployment
#             echo "Deployment action completed."

#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
