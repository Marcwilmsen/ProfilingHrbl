name: Django Docker and Postgres DB Build and Deploy to Docker Swarm

on:
  push:
    branches:
      - release_prepreation

jobs:
  build_and_push_django:
    runs-on: ubuntu-latest
    outputs:
      build_required: ${{ steps.set_build_required.outputs.build_required }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: release_prepreation # Specify the branch here if needed
          fetch-depth: 0 # This ensures the entire repo history is available

      - name: Set build required output
        id: set_build_required
        run: |
          if git diff --name-only $GITHUB_SHA ${{ github.event.before }} | grep 'Backend/django_backend_sod3/'; then
            echo "build_required=true" >> $GITHUB_ENV
            echo "::set-output name=build_required::true"
          else
            echo "build_required=false" >> $GITHUB_ENV
            echo "::set-output name=build_required::false"
          fi

      - name: Debug output
        run: |
          if [[ $BUILD_REQUIRED == 'true' ]]; then
            echo "Build is required."
          else
            echo "Build is not required."
          fi
        env:
          BUILD_REQUIRED: ${{ steps.set_build_required.outputs.build_required }}

      - name: Log in to GitHub Container Registry
        if: steps.set_build_required.outputs.build_required == 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.PAT }}

      - name: Build and push Docker image
        if: steps.set_build_required.outputs.build_required == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Backend/django_backend_sod3/Dockerfile
          push: true
          tags: ghcr.io/${{  secrets.GHCR_USERNAME }}/django-app:latest

  deploy_django:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build_and_push_django # This assumes you have a prior job named 'build_and_push' that needs to complete before this runs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: release_prepreation # Specify the branch here if needed
          fetch-depth: 0 # This ensures the entire repo history is available

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Ensure Docker Swarm is initialized
            if ! docker info | grep -q 'Swarm: active'; then
              echo "Initializing Docker Swarm..."
              docker swarm init || { echo "Failed to initialize Docker Swarm"; exit 1; }
            fi

            # Convert repository owner to lowercase and store in a variable
            REPO_OWNER_LOWER=$(echo "${{ secrets.GHCR_USERNAME }}" | tr '[:upper:]' '[:lower:]')
            IMAGE="ghcr.io/$REPO_OWNER_LOWER/django-app:latest"

            # Attempt to login to GitHub Container Registry
            echo "Logging in to GitHub Container Registry..."
            echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            # Check if the image exists in the registry
            echo "Checking if the image $IMAGE exists in the registry..."
            if docker pull $IMAGE; then
              echo "Image exists. Proceeding with deployment..."
            else
              echo "Image does not exist or cannot be accessed."
              echo "Checking permissions and repository settings..."

              # Check for read:packages permission
              echo "Checking for read:packages permission..."
              TOKEN_PERMISSIONS=$(curl -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/user/permissions)
              echo "Token permissions: $TOKEN_PERMISSIONS"

              # If permissions are insufficient, exit the job with an error
              if [[ $TOKEN_PERMISSIONS != *"read:packages"* ]]; then
                echo "The PAT does not have read:packages permission."
                exit 1
              else
                echo "The PAT has read:packages permission.."
              fi

              # Check if there are organization-level restrictions
              echo "Checking for organization-level restrictions..."
              # Additional checks can be implemented here based on the organization settings

              # Exit with an error
              exit 1
            fi

            # Check Network
            # Check if the shared_network exists, if not, create it
            docker network ls | grep sod3_test_network || docker network create --driver=overlay --attachable sod3_test_network

            # Remove the old service if it exists
            docker service rm test_django_backend_service || true

            # Create the service and pass the secret as an environment variable
            docker service create \
            --name test_django_backend_service \
            --network sod3_test_network \
            --env GF_SECURITY_ADMIN_PASSWORD="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --publish published=8080,target=8080 \
            $IMAGE || { echo "Failed to deploy the django service"; exit 1; }

            # Wait for a moment to ensure services are up
            echo "Waiting for services to start..."
            sleep 10

            # Check the deployment status
            echo "Checking deployment status..."
            if ! docker service ls | grep -q 'test_django_backend_service'; then
              echo "Deployment failed: services are not running."
              exit 1
            fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_and_push_postgres:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          ref: release_prepreation # Specify the branch here if needed
          fetch-depth: 0 # This ensures the entire repo history is available

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.PAT }}

      - name: Build and push Docker image for PostgreSQL
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Backend/postgres_database/Dockerfile
          push: true
          tags: ghcr.io/${{ secrets.GHCR_USERNAME }}/postgres:latest

  deploy_postgres:
    name: Deploy PostgreSQL to server
    runs-on: ubuntu-latest
    needs: build_and_push_postgres
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: release_prepreation # Specify the branch here if needed
          fetch-depth: 0 # This ensures the entire repo history is available

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Ensure Docker Swarm is initialized
            if ! docker info | grep -q 'Swarm: active'; then
                echo "Initializing Docker Swarm..."
                docker swarm init || { echo "Failed to initialize Docker Swarm"; exit 1; }
            fi

            # Convert repository owner to lowercase and store in a variable
            REPO_OWNER_LOWER=$(echo "${{ secrets.GHCR_USERNAME }}" | tr '[:upper:]' '[:lower:]')
            IMAGE="ghcr.io/$REPO_OWNER_LOWER/postgres:latest"

            # Attempt to login to GitHub Container Registry
            echo "Logging in to GitHub Container Registry..."
            echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            # Check if the image exists in the registry
            echo "Checking if the image $IMAGE exists in the registry..."
            if docker pull $IMAGE; then
                echo "Image exists. Proceeding with deployment...."

                # Check if the postgres container is already running
                if [ $(docker ps -q -f name=postgres_service_testing_db -f status=running | wc -l) -eq 0 ]; then
                    echo "Postgres container is not running. Starting deployment......"

                    # Check if the shared_network exists, if not, create it
                    docker network ls | grep sod3_test_network || docker network create --driver=overlay --attachable sod3_test_network

                    # Remove the old service if it exists
                    docker service rm postgres_service_testing_db || true

                    # Create the service and pass the secret as an environment variable
                    docker service create \
                    --name postgres_service_testing_db \
                    --network sod3_test_network \
                    --env POSTGRES_DB="${{ secrets.POSTGRES_DB }}" \
                    --env POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
                    --env POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
                    --publish published=5433,target=5433 \
                    $IMAGE
                else
                    echo "Postgres container is already running."
                fi
            else
                echo "Image does not exist or cannot be accessed."
                echo "Checking permissions and repository settings..."

                # Check for read:packages permission
                echo "Checking for read:packages permission..."
                TOKEN_PERMISSIONS=$(curl -H "Authorization: token ${{ secrets.PAT }}" https://api.github.com/user/permissions)
                echo "Token permissions: $TOKEN_PERMISSIONS"

                # If permissions are insufficient, exit the job with an error
                if [[ $TOKEN_PERMISSIONS != *"read:packages"* ]]; then
                    echo "The PAT does not have read:packages permission."
                    exit 1
                else
                    echo "The PAT has read:packages permission..."
                fi

                # Exit with an error
                exit 1
            fi

            # After updating or creating the service, additional steps can be added to verify the deployment
            echo "Deployment action completed."

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
